=== файл utils.h

== Общая информация

Файл utils.h содержит все полезные функции, использующиеся различными классами.
В нём содержатся функции, чтобы:
	- работать с пикселями в SDL_Surface;
	- рисовать текстуры и прямоугольник;
	- определять, является ли число степенью двойки;
	- находить ближайшую степень двойки, большую чем число;
	- проверять, существует ли файл;
	- считывать строку из потока;
	- работать с числами, строками и кодировкой Unicode;
	- находить кратчайший путь с помощью алгоритма A*.

== Функции

 Uint32 getpixel(SDL_Surface* surface, int x, int y);
  Возвращает четырёхбайтовое целое, содержащее информацию о цвете и прозрачности пикселя.
  Пиксель берётся из точки %x%, %y% изображения %surface%.

 Uint8 get_color_r(SDL_Surface* surface, int x, int y)
  Возвращает Red-компоненту пикселя (0-255).
  Пиксель берётся из точки %x%, %y% изображения %surface%.

 Uint8 get_color_g(SDL_Surface* surface, int x, int y)
  Возвращает Green-компоненту пикселя (0-255).
  Пиксель берётся из точки %x%, %y% изображения %surface%.

 Uint8 get_color_b(SDL_Surface* surface, int x, int y)
  Возвращает Blue-компоненту пикселя (0-255).
  Пиксель берётся из точки %x%, %y% изображения %surface%.

 Uint8 get_color_a(SDL_Surface* surface, int x, int y)
  Возвращает прозрачность пикселя (0-255, где 0 означает полную прозрачность, а 255 — непрозрачность).
  Пиксель берётся из точки %x%, %y% изображения %surface%.

 float get_color_a(GLuint* texture, int x, int y)
  Возвращает прозрачность пикселя (0-255, где 0 означает полную прозрачность, а 255 — непрозрачность).
  Пиксель берётся из точки %x%, %y% текстуры %texture%.
 (Медленнее предыдущей функции, так как этой приходится выполнять лишнюю работу.)

 SDL_Surface* create_surface(int flags, int w, int h, int bits = 32)
  Возвращает новый SDL_Surface, созданный с заданными параметрами.

 SDL_Surface* create_surface(SDL_Surface* to_replace, int flags, int w, int h, int bits = 32)
  Возвращает новый SDL_Surface, созданный с заданными параметрами, который заменяет SDL_Surface, переданный параметром %to_replace%.

 void blend_surface(SDL_Surface* surface, Uint32 alpha)
  Изменяет прозрачность SDL_Surface %surface% на переданную прозрачность %alpha%, делая изображения частично прозрачным.
 (Функция медленна и вообще не рекомендуется к использованию.)

 Image* surface_to_texture(SDL_Surface* src, bool delete_after_transform = true)
  Преобразует заданный SDL_Surface %src% в OpenGL-текстуру и возвращает объект Image, содержащий указатель на эту текстуру.
  Если параметр %delete_after_transform% равен true, %src% будет освобождён после преобразования.
  В противном случае %src% не будет освобождён и тоже будет передан в возвращаемом объекте Image.

 void draw_texture(float x, float y, float w, float h, bool center = false)
  Отрисовывает закреплённую OpenGL-текстуру на экран. Принимает координату и размеры. Если параметр %center% равен true, центр текстуры будет в переданной координате.

 void draw_texture(float x, float y, float w, float h, float nw, float nh, float angle = 0, bool center = false)
  Отрисовывает закреплённую OpenGL-текстуру, растянутую до ширины %nw% и высоты %nh%, а также повёрнутую на %angle% градусов, на экран. Принимает координату и оригинальные размеры. Если параметр %center% равен true, центр текстуры будет в переданной координате.

 void draw_texture(float W, float H, float t_x, float t_y, float t_dx, float t_dy, float x, float y, float dX, float dY, float angle, bool center = false)
  Отрисовывает кусок закреплённой OpenGL-текстуры, растянутый до ширины %nw% и высоты %nh%, а также повёрнутый на %angle% градусов, на экран. Принимает координату и оригинальные размеры. Если параметр %center% равен true, центр текстуры будет в переданной координате. Кусок текстуры берётся из точки %t_x%, %t_y% и его исходные ширина и высота будут равны %t_dx% и %t_dy%.

 void draw_rectangle(int x, int y, int w, int h)
  Отрисовывает прямоугольник заданной ширины и высоты в заданной точке.

 unsigned int nearest2(unsigned int a)
  Возвращает ближайшую степень двойки, которая больше %a%.

 bool is_power2(unsigned int a)
  Возвращает true, если %a% является степенью двойки.

 bool file_exists(const char* filename)
  Возвращает true, если файл с заданным именем существует.

 string read_string(ifstream&)
  Возвращает строку, прочитанную из переданного потока. Если строка в потоке начинается с символа ", то функция прочитает всю строку между двумя такими символами. В противном случае любой пробельный символ будет считаться завершением строки.

 string thousands(int n)
  Возвращает строку, представляющую число %n%. Тысячи будут записаны буквой «K» (например, для числа 5000 выдаётся "5K").

 int toint(string)
  Считывает целое из строки и возвращает его. Игнорирует символы, не являющиеся цифрами (исключая '+' и '-' перед самим числом).

 string unichar(Uint16 code)
  Возвращает строку, содержащую символ(ы), соответствующие заданному коду %code% в кодировке Unicode.

 bool letters_equal(string a, string b)
  Возвращает true, если буквы в строках %a% и %b% одинаковы. Считает строчные и заглавные буквы одинаковыми ("FATE", "fate" и "FaTe" являются одинаковыми строками).

 stack<int> A_star(int fx, int fy, int tx, int ty, vector< vector<bool> >& obstacles, int usualcost = 10, int diagcost = 14)
  Реализует алгоритм A*. Возвращает контейнер stack, содержащий индексы, которые составляют путь между точкой (%fx%, %fy%) и (%tx%, %ty%). Если пути нет, возвращает пустой stack. Параметр %obstacles% должен содержать true в точках, которые нельзя пройти, параметры %usualcost% и %diagcost% указывают «цену» обычных и диагональных ходов.