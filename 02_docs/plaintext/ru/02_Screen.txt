=== класс SCREEN

== Общая информация

Объекты Screen содержат объекты Object, которые отрисовываются на экране пользователя.

Каждый объект Screen имеет ScreenID в файле game.h, чтобы объект Game мог различать их друг от друга. Новый Screen может быть запущен двумя способами — передачей указателя на Screen в функцию open_screen() класса Game или передачей ScreenID в эту функцию (в таком случае необходимый объект Screen будет создан автоматически, если вы добавили свой класс в функцию create_screen(ScreenID) класса Game).

Объекты могут быть «статичными». Это означает, что они будут храниться объектом Game и не будут создаваться заново. Статичные объекты Screen сохраняют своё состояние даже если Game открывал другие экраны. Вы можете попросить объект Game создать статичный Screen заново (например, чтобы начать новую игру), вызвав Game::open_screen() с соответствующим ScreenID и дополнительным параметром true.


== Наследование класса Screen

Объект класса Screen может быть открыт объектом Game, хотя он ничего не делает и ничего не содержит. Так что если вы наследуете класс Screen, вы получите рабочий класс, даже если не перегрузите ни одну из его виртуальных функций.

Следующие функции класса Screen можно перегрузить:

 void load()
  Эта функция вызывается конструктором класса. Чтобы подготовить объект к работе, вы можете использовать как эту функцию, так и сам конструктор класса. Вы также можете использовать и то, и другое.
  load() класса Screen не делает ничего.

 void start()
  Эта функция вызывается каждый раз, когда объект Screen открывается объектом Game.
 (Вы можете, например, узнать, был ли этот экран открыт впервые и сделать что-нибудь особенное.)
  start() класса Screen не делает ничего.

 void update()
  Эта функция вызывается объектом Game внутри бесконечного цикла. Функция должна оповестить объекты Object, чтобы они могли обновить своё состояние если произошли события мыши или клавиатуры.
  update() класса Screen оповещает все объекты Object и завершает игру, если пользователь нажал кнопку закрытия окна или клавишу Escape.

 void redraw()
  Эта функция вызывается объектом Game внутри бесконечного цикла. Функция должна отрисовать объекты Object на экране.
  redraw() класса Screen отрисовывает все объекты Object на экране.

 void show_message(Object*)
  Эта функция может быть вызвана любым объектом, чтобы попросить объект Screen отобразить переданный Object.
  show_message() класса Screen отображает любой переданный Object.

 void save_state(ofstream&)
  Эта функция вызывается объектом Game, чтобы сохранить состояние в переданный поток вывода. Она должна использоваться для сохранения информациии, которая не будет доступна в следующей сессии, чтобы её можно было воссоздать.
 (Например, меню не нужно сохранять состояние, потому что оно не меняется. А уровни, в которых игрок что-то переместил, должны сохранить своё состояние.)
  save_state() класса Screen не делает ничего.

 void load_state(ifstream&)
  Эта функция вызывается объектом Game, чтобы загрузить состояние из переданного потока ввода. Она должна использоваться для загрузки информации, которая была сохранена предыдущей функцией.
 (Например, вы должны воссоздать уровень, который сохранили.)
  load_state() класса Screen не делает ничего.

 ScreenID ID()
  Эта функция должна возвращать ScreenID, соответствующий данному экрану, чтобы объекты можно было отличить друг от друга.
  ID() класса Screen возвращает SCREENID_DEFAULT, который объявлен в файле game.h.


== Цель класса Screen

Каждый Screen должен содержать объекты Object, оповещать их об обновлении их состояния и отрисовывать их на экран. Так как каждый Object имеет приоритет, их нужно хранить в порядке. Класс Screen имеет специальную очередь объектов Object, чтобы к ним было проще обращаться. Есть несколько защищённых (protected) функций, которые работают с очередью. Они готовы к использованию и должны вызываться из перегруженных виртуальных функций.

Вот список защищённых функций класса Screen:

 void add_object(Object* o, bool reorder = true)
  Добавляет Object в очередь. Так как это действие может нарушить порядок в очереди, функция может упорядочить её сразу после этого. Но упорядочивание может затрачивать много времени, поэтому вы можете передать параметр false и упорядочить очередь вручную, когда это будет необходимо.

 void reorder_queue()
  Упорядочивает объекты Object в очереди.

 void update_queue()
  Оповещает объекты Object в очереди, чтобы они обновили своё состояние, если это потребуется, использовав данные класса Input.

 void clear_queue()
  Удаляет все объекты Object из очереди.
  
 void draw_queue()
  Отрисовывает все объекты Object в очереди на экран.

 void draw_queue(int x, int y)
  Отрисовывает все объекты Object в очереди на экран с заданным смещением по осям X и Y.
  