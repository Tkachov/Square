=== класс BUTTON

== Общая информация

Класс Button используется для создания кнопок. Он наследует класс Object.
Когда кнопку нажимают, она вызывает функцию, переданную с помощью указателя на класс functor.
Существует четыре состояния кнопки:
	«up», означающее, что курсор вне кнопки;
	«over», означающее, что курсор на кнопке;
	«pressed», означающее, что курсор на кнопке и кнопка была нажата или зажата;
	«disabled», означающее, что кнопка не реагирует на действия пользователя.

Каждому состоянию соответствует отдельный объект класса Sprite.

Кнопка содержит надпись, представленную объектом класса Text, которая отрисовывает текст поверх спрайта состояния кнопки.

== Наследование класса Button

Button является объектом класса Object, т.е. его функции update() и draw() могут (и должны) быть перегружены. Но сам класса Button содержит защищённые функции, управляющие его поведением:

 void redraw()
  Функция, которая вызывается каждый раз, когда кнопку нужно перерисовать (когда состояние, шрифт надписи или ещё что-нибудь изменилось).
  Функция обновляет состояние кнопки.

 void update_label()
  Эта функция должна вызываться каждый раз, когда надпись или кнопка изменились, чтобы поместить надпись в нужное место.
  Обычно вызывается из функции redraw().

== Функции

 Button(functor* = 0)
  Конструктор, может принимать объект класса functor, который будет использован при нажатии на кнопку.

 void draw() [наследуется из Object]
  Отрисовывает себя на экран.

 void draw(int x, int y) [наследуется из Object]
  Отрисовывает себя на экран в заданной точке.

 void update(Input*, int x_offset = 0, int y_offset = 0) [наследуется из Object]
  Обновляет состояние и вызывает функцию, если кнопка мыши была нажата.

 void set_up_state(Sprite)
  Устанавливает Sprite, соответствующий состоянию «up».

 void set_over_state(Sprite)
  Устанавливает Sprite, соответствующий состоянию «over».

 void set_pressed_state(Sprite)
  Устанавливает Sprite, соответствующий состоянию «pressed».

 void set_disabled_state(Sprite)
  Устанавливает Sprite, соответствующий состоянию «disabled».

 void set_states(Sprite up, Sprite over, Sprite pressed, Sprite disabled)
  Устанавливает объекты Sprite, соответствующие состояниям «up», «over», «pressed» и «disabled».

 void set_font(TTF_Font*)
  Устанавливает шрифт надписи.

 void set_color(SDL_Color)
  Устанавливает цвет надписи.

 void set_text(string)
  Устанавливает текст надписи.

 void set_label(TTF_Font* font, SDL_Color color, string text)
  Устанавливает шрифт, цвет и текст надписи.

 void set_func(functor*)
  Устанавливает указатель на объект класса functor.

 void set_pixel_perfect(bool)
  Устанавливает значение настройки «пиксельной точности».
  Если параметр равен true, кнопка будет проверять, находится ли курсор на непрозрачной области спрайта или нет.
  В противном случае кнопка будет проверять только находится ли курсор внутри прямоугольной области кнопки (что проще).

 void set_disabled(bool)
  Устанавливает, отключена (true) или включена (false) ли кнопка.
  Если кнопка отключена, она примет состояние «disabled» и не будет реагировать на действия пользователя.

 void set_holding_click_delay(int delay)
  Устанавливает интервал между вызовами функции, если кнопка мыши зажата.
  Если параметр %delay% равен 0, функция будет вызываться лишь в момент, когда кнопка мыши была только что нажата.
  В противном случае функция будет вызываться каждые %delay% кадров пока кнопка мыши зажата.

 bool is_disabled()
  Возвращает true, если кнопка отключена.
  